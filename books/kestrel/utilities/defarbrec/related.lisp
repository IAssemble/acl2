; Arbitrary Recursion Library
;
; Copyright (C) 2019 Kestrel Institute (http://www.kestrel.edu)
;
; License: A 3-clause BSD license. See the LICENSE file distributed with ACL2.
;
; Author: Alessandro Coglio (coglio@kestrel.edu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package "ACL2")

(include-book "xdoc/constructors" :dir :system)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defxdoc defarbrec-related

  :parents (defarbrec)

  :short "Tools related to @(tsee defarbrec)."

  :long

  (xdoc::topstring

   (xdoc::p
    "@('defarbrec') is related to the tools listed below,
     which also allow the introduction of functions in logic mode
     that may not terminate for all argument values.
     For the use case described in the `Introduction' section above
     (namely, verification via transformation),
     @('defarbrec') seems preferable to the existing tools, as explained below.
     However, for different use cases,
     some of the existing tools may be preferable to @('defarbrec').
     In particular, the function generated by @('defarbrec')
     is not executable due to the termination test;
     it may be transformed into an executable function
     by transforming away the termination test (possibly in a restricted domain)
     as explained in the `Introduction' section,
     but some of the existing tools
     immediately produce executable functions instead.")

   (xdoc::p
    "@(tsee defpun) produces a constrained (not defined) function.
     Since APT transformations operate on defined functions,
     having @('defarbrec') generate a defined function
     makes the function amenable to transformations.
     @(tsee defpun) produces only tail-recursive functions,
     while @('defarbrec') can produce non-tail-recursive functions.")

   (xdoc::p
    "@('defp') (see the final part of the @(tsee defpun) documentation)
     is a generalization of @(tsee defpun),
     but it still produces
     a constrained (not defined) tail-recursive-only function.")

   (xdoc::p
    "@('defpun-exec') (see the final part of the @(tsee defpun) documentation)
     extends @(tsee defpun) with executability,
     but its use of @(tsee defexec) requires
     that the domain over which the function terminates be provided right away,
     and that the termination be proved right away.
     Both things are deferred with @(tsee defarbrec).")

   (xdoc::p
    "@(tsee defpm) produces a measure, termination predicate, and some theorems
     that can be used to introduce a tail-recursive logic-mode function
     similar to the one produced by @('defarbrec');
     the companion tool @(tsee defthm-domain) serves to show that
     the termination predicate holds in suitable domains.
     However, the  termination predicate generated by @(tsee defpm)
     is constrained, not defined;
     in constrast,
     the termination predicate generated by @('defarbrec') is defined,
     and thus amenable to APT transformations.
     @('defarbrec') generates the recursive function,
     while @(tsee defpm) provides the components for defining it manually.")

   (xdoc::p
    "@('def::ung') (see the final part of the @(tsee defpm) documentation),
     which supersedes @('def::un') in @('books/coi/termination/assuming'),
     produces a logic-mode defined function that may be even reflexive
     (i.e. it may have recursive calls like @('(mc91 (mc91 (+ n 11)))')),
     while the current implementation of @('defarbrec')
     does not support reflexive functions.
     The function produced by @('def::ung') has a more complex definition
     than the function produced by @('defarbrec'):
     the former has several ``layers'' of sub-functions,
     while the latter has just the form shown
     in the `Generated Functions' section above.
     The simpler definition eases the application of transformations to it,
     as opposed to transforming several sub-functions.")))
